local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
 
local Window = Rayfield:CreateWindow({
   Name = "AWS By BKmD_YT",
   LoadingTitle = "Arm Wrestle Simulator",
   LoadingSubtitle = "by BKmD_YT",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "hello"
   },
   Discord = {
      Enabled = true,
      Invite = "3rQsKNhP4J", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "(NOT OUT!) Keysystem - AWS",
      Subtitle = "Everything you need to be best (: (BKmD_YT)",
      Note = "Dm me if u got sugg/issues, Discord: (bkmd_ytt)",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"BKOnTop!"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Event", nil) -- Title, Image
local Section = MainTab:CreateSection("TP EVENT WORLDS")

local WTab = Window:CreateTab("Main", nil) -- Title, Image
local Section = WTab:CreateSection("still idk")

local Toggle = WTab:CreateToggle({
   Name = "Auto Click NPCs",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
          isAutoTrainEnabled = Value -- Update the shared variable based on the toggle state

            if Value then 
             task.spawn(function()
            while isAutoTrainEnabled do
                wait(0.001)
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("WrestleService"):WaitForChild("RF"):WaitForChild("OnClick"):InvokeServer()
            end
         end)
      end
   end,
})

local Toggle = WTab:CreateToggle({
    Name = "Auto Roll",
    CurrentValue = false,
    Flag = "Toggle6",
    Callback = function(Value)
           isAutoTrainEnabled = Value

           if Value then
               task.spawn(function()
               while isAutoTrainEnabled do
                   wait(0.001)
                   game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("AuraService"):WaitForChild("RF"):WaitForChild("Roll"):InvokeServer()
                end
             end)
          end
       end,
})

local Button = WTab:CreateButton({
    Name = "Anti AFK",
    Callback = function()
      loadstring(game:HttpGet("https://raw.githubusercontent.com/batusz/main/roblox/__Anti__Afk__Script__", true))()
  end,
})

local Button = MainTab:CreateButton({
    Name = "TP Event Part (1)",
    Callback = function()
        local args = {
            [1] = workspace:WaitForChild("Zones"):WaitForChild("ChristmasEvent"):WaitForChild("Interactables"):WaitForChild("Teleports"):WaitForChild("Locations"):WaitForChild("Spawn")
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ZoneService"):WaitForChild("RE"):WaitForChild("teleport"):FireServer(unpack(args))
    end,
 })

local Button = MainTab:CreateButton({
    Name = "TP Event Part (2)",
    Callback = function()
        local args = {
            [1] = workspace:WaitForChild("Zones"):WaitForChild("SantasWorkshop"):WaitForChild("Interactables"):WaitForChild("Teleports"):WaitForChild("Locations"):WaitForChild("Spawn")
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ZoneService"):WaitForChild("RE"):WaitForChild("teleport"):FireServer(unpack(args))
    end,
 })

local Button = MainTab:CreateButton({
    Name = "TP Event Part (3)",
    Callback = function()
        local args = {
            [1] = workspace:WaitForChild("Zones"):WaitForChild("Frostlands"):WaitForChild("Interactables"):WaitForChild("Teleports"):WaitForChild("Locations"):WaitForChild("Spawn")
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ZoneService"):WaitForChild("RE"):WaitForChild("teleport"):FireServer(unpack(args))
    end,
 })

local Section = MainTab:CreateSection("Main")
local Toggle = MainTab:CreateToggle({
    Name = "Auto Spin Vault",
    CurrentValue = false,
    Flag = "Toggle7",
    Callback = function(Value)
           isAutoTrainEnabled = Value

             if Value then
                 task.spawn(function()
                 while isAutoTrainEnabled do
                     wait()
                      local args = {
                        [1] = "Christmas"
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCrateService"):WaitForChild("RF"):WaitForChild("Spin"):InvokeServer(unpack(args))
                 end
              end)
           end
        end
})

local Toggle = MainTab:CreateToggle({
   Name = "Auto Claim Workshop Tree",
   CurrentValue = false,
   Flag = "Toggle4", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
          isAutoTrainEnabled = Value -- Update the shared variable based on the toggle state

            if Value then 
             task.spawn(function()
            while isAutoTrainEnabled do
                wait(2.5)
                 local args = {
                  [1] = "WorkshopTree"
                }

               game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("FreeGiftService"):WaitForChild("RF"):WaitForChild("Claim"):InvokeServer(unpack(args))
            end
         end)
      end
   end,
})

local Toggle = MainTab:CreateToggle({
   Name = "Auto Claim Santa Sleigh",
   CurrentValue = false,
   Flag = "Toggle5", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
          isAutoTrainEnabled = Value -- Update the shared variable based on the toggle state

            if Value then 
             task.spawn(function()
            while isAutoTrainEnabled do
                wait(2.5)
                 local args = {
                  [1] = "SantaSleigh"
                }

               game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("FreeGiftService"):WaitForChild("RF"):WaitForChild("Claim"):InvokeServer(unpack(args))
            end
         end)
      end
   end,
})

local Section = MainTab:CreateSection("Train (OP)")
local Input = MainTab:CreateInput({
   Name = "Choose Your Biceps Weight (Part 3)",
   CurrentValue = "",
   PlaceholderText = "1 To 12",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
       -- Ensure the input is a valid number between 1 and 12
       local number = tonumber(Text)
       if number and number >= 1 and number <= 12 then
           -- Use the input value (number) to update the Frostland argument
           local args = {
               [1] = {
                   ["Value"] = "Biceps",
                   ["AutoType"] = "AutoTrain"
               }
           }

           game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("IdleTeleportService"):WaitForChild("RF"):WaitForChild("SetLatestTeleportData"):InvokeServer(unpack(args))

           local args = {
               [1] = "Frostlands",
               [2] = "Dumbells",
               [3] = "Frostland" .. number  -- Use the number entered in the input
           }

           game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onEquipRequest"):FireServer(unpack(args))

           local args = {
               [1] = "AutoTraining",
               [2] = {
                   ["TrainingType"] = "Biceps"
               }
           }

           game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("AutoService"):WaitForChild("RF"):WaitForChild("SetRejoin"):InvokeServer(unpack(args))
       else
           -- If the input is invalid, show an error message or handle it
           print("Please enter a number between 1 and 12.")
       end
   end,
})

local isAutoTrainEnabled = false -- A shared variable to control the loop

local Toggle = MainTab:CreateToggle({
   Name = "Auto Click Train",
   CurrentValue = false,
   Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
          isAutoTrainEnabled = Value -- Update the shared variable based on the toggle state

            if Value then 
             task.spawn(function()
            while isAutoTrainEnabled do
                wait()
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onClick"):FireServer()
            end
         end)
      end
   end,
})

local isLooping = false  -- Flag to control the loop
local currentNumber = 1  -- Default Frostland number

-- Toggle to start/stop the loop
local Toggle = MainTab:CreateToggle({
    Name = "Start Auto Train Glitch (You Can fight NPCs While You Training!)",
    CurrentValue = false,
    Flag = "Toggle3",
    Callback = function(Value)
        isLooping = Value  -- Set the loop flag based on the toggle state
        if Value then
            -- Start the loop when the toggle is enabled
            task.spawn(function()
                while isLooping do
                    wait()  -- Wait for a short time before repeating the loop
                    local args = {
                        [1] = {
                            ["Value"] = "Biceps",
                            ["AutoType"] = "AutoTrain"
                        }
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("IdleTeleportService"):WaitForChild("RF"):WaitForChild("SetLatestTeleportData"):InvokeServer(unpack(args))

                    local args = {
                        [1] = "Frostlands",
                        [2] = "Dumbells",
                        [3] = "Frostland" .. currentNumber  -- Use the current input value
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onEquipRequest"):FireServer(unpack(args))

                    local args = {
                        [1] = "AutoTraining",
                        [2] = {
                            ["TrainingType"] = "Biceps"
                        }
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("AutoService"):WaitForChild("RF"):WaitForChild("SetRejoin"):InvokeServer(unpack(args))
                end
            end)
        end
    end,
})

-- Input to enter a number for Frostland
local Input = MainTab:CreateInput({
    Name = "Choose Your Biceps Weight (Part 3) For The Glitch!",
    CurrentValue = "",
    PlaceholderText = "1 To 12",
    RemoveTextAfterFocusLost = false,
    Flag = "Input2",
    Callback = function(Text)
        -- Ensure the input is a valid number between 1 and 12
        local number = tonumber(Text)
        if number and number >= 1 and number <= 12 then
            currentNumber = number  -- Update the Frostland number based on the input
            print("Updated Frostland number to: " .. currentNumber)
        else
            -- If the input is invalid, show an error message or handle it
            print("Please enter a number between 1 and 12.")
        end
    end,
})

local Section = MainTab:CreateSection("More Coming Soon... (:")
local Button = MainTab:CreateButton({
    Name = "More Coming Soon... (:",
    Callback = function()

    end,
})
